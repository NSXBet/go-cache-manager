package cmd

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

type Generator struct{}

func NewGenerator() *Generator {
	return &Generator{}
}

func (g *Generator) Generate() error {
	var err error

	protoOpt := protogen.Options{}

	protoOpt.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if f.Generate {
				if gerr := g.generateFile(gen, f); gerr != nil {
					err = fmt.Errorf("generating file %s: %w", f.Desc.Path(), gerr)

					return err
				}
			}
		}

		return nil
	})

	if err != nil {
		return fmt.Errorf("generating cache manager code: %w", err)
	}

	return nil
}

func (g *Generator) generateFile(gen *protogen.Plugin, file *protogen.File) error {
	filename := file.GeneratedFilenamePrefix + "_cache_manager.pb.go"

	gf := gen.NewGeneratedFile(filename, file.GoImportPath)
	gf.P("// Code generated by protoc-gen-go-cache-manager. DO NOT EDIT.")
	gf.P()
	gf.P("package ", file.GoPackageName)
	gf.P()

	for _, service := range file.Services {
		if !strings.HasSuffix(service.GoName, "Cache") {
			continue
		}

		if serr := g.generateService(gf, service); serr != nil {
			return serr
		}
	}

	return nil
}

func (g *Generator) managerName(structname string) string {
	return fmt.Sprintf("%sManager", structname)
}

func (g *Generator) generateService(gf *protogen.GeneratedFile, service *protogen.Service) error {
	gf.P("type ", g.managerName(service.GoName), " struct {")
	gf.P("}")
	gf.P()

	gf.P("func New", g.managerName(service.GoName), "() *", service.GoName, "Manager {")
	gf.P("	return &", g.managerName(service.GoName), " {")
	gf.P("	}")
	gf.P("}")
	gf.P()

	for _, method := range service.Methods {
		if merr := g.generateMethod(gf, method); merr != nil {
			return merr
		}
	}

	return nil
}

func (g *Generator) generateMethod(gf *protogen.GeneratedFile, method *protogen.Method) error {
	managerName := g.managerName(method.Parent.GoName)

	// Get cache
	gf.P(
		"func (cm *",
		managerName,
		") Get",
		method.GoName,
		"(",
	)
	gf.P("	input *", method.Input.GoIdent.GoName, ",")
	gf.P(") (*", method.Output.GoIdent.GoName, ", error) {")
	gf.P("	return nil, nil")
	gf.P("}")
	gf.P()

	// Set cache
	gf.P(
		"func (cm *",
		managerName,
		") Update",
		method.GoName,
		"(",
	)
	gf.P("	input *", method.Input.GoIdent.GoName, ",")
	gf.P(
		" 	updateFn func(*",
		method.Input.GoIdent.GoName,
		") (*",
		method.Output.GoIdent.GoName,
		", error),",
	)
	gf.P(") {")
	gf.P("}")
	gf.P()

	return nil
}
